1.)create the context, expose provider, consumer
2.)provide context value in provider component wrapper component
3.)consume context value in child component


=================
App
C
E
F
=======================
App
===================

const myContext=React.createContext();

const userProvider=myContext.Provider

const userConsumer = myContext.Consumer

export {p,c}

=================
in App
<UserProvider value="Dhana">
	<ComponentC />
</UserProvider>

====================
in F

<UserConsumer>
  {
	(userName)=>{
		return <div>>{userName}</div>
	}
}
</UserConsumer>

==========================

NOTE:
1.)
We can set the default value to context

pass argument to createContext() method while creating the context.

the default provider value is used when there is no matching provider component wrapping the components above in the tree.

2.)context type

drawbacks
only in class components
no multiple contexts

************************
Component Life cycle:
===================

React 16.4 

Mounting (instance created and inserted in DOM)
1.)constructor
a.)called when new component created
b.)initializing state
binding event handlers
c.)never make http requests (no side effects calls/tasks)
d.)call super(props) to call base class constructor
e.)directly set state

2.)static getDerivedStateFromProps
a.)rarely used lifecycle method
b.)used when state change deps on props change over time
c.)no access to this
d.)no side effects tasks

3.)render
a.)no setState to be done
b.)we read props and state and jsx uses the same
c.)no interaction with DOM , no ajax 
d.)right after parent render, child lifecyle methods are called 
4.)componentDidMount
a.)called only once , in whole lifecycle
b.)when ccomponent and all children are rendered to DOM
c.)good for side effects , initialization of DOM nodes

Updating (re-rendered as result of change of props or state changes)
static getDerivedStateFromProps
shouldComponentUpdate
render
getSnapShotBeforeUpdate
componentDidUpdate


Unmounting(when removed from dom)

componentWillUnmount()

Error Handling
static getDerivedStateFromError
componentDidCatch


*************************

Pure Components:
----------------------------

React.PureComponent

when to use ?
 
reg. component-> always return true in should component updat elife cycle method

pure---> shallow prop and state comparision implemented in pure compoenent

=============
return false from shouldComponentUpdate() if 
you dont want to rerrender the compo upon state changes
=============

shallow compo

primmitive

type and value

complex types lik eobjects/arrays
teh references are compared

prev state,curr state
prev props,curr props


**************************

if parent doesnot re-render , child comps dont render

perf boost
no unnecessary re-rendering

=========================

when dealing with pure components, please make sure not to mutate the existing objects rather than do like creating new objects.


**************************

safe to use reg components
**************************

Higher Order Components:

Why there is a need for HOC?

to avoid duplicate functionaity, reuse or share the common functionality


const enhancedComponent=
higherOrderComponent(originalComponent);

Higher order component is a function which takes in the component and returns the enhanced version of the input component.


























'use strict';

const fs = require('fs');


process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
  inputString += inputStdin;
});

process.stdin.on('end', function() {
  inputString = inputString.split('\n');

  main();
});

function readLine() {
  return inputString[currentLine++];
}

const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

function logger(msg) {
  ws.write(`${msg.text}\n`);
}

function joinedLogger(level, sep) {
 let joinedLog = '';
 let textMsgs=[]
  return function(...messages){
      let logMsgs = [...messages];
      logMsgs.map(function(message){
          if(message["level"] >= level)
            textMsgs.push(message["text"])
      })
      joinedLog=textMsgs.join(sep);
      console.log(joinedLog.replace('\u0020',''));
      return joinedLog.replace('\u0020','');
  };
}


function main() {
  const firstLine = readLine().trim().split(" ");
  const level = parseInt(firstLine[0]);
  const sep = firstLine[1];
  const myLog = joinedLogger(level, sep);

  const n = parseInt(readLine().trim());
  let messages = [];
  for (let i = 0; i < n; ++i) {
    const line = readLine().trim().split(" ");
    const level = parseInt(line[0]);
    const text = line[1];
    messages.push({ level, text });
  }

  myLog(...messages);
  ws.end();
}





'use strict';

const fs = require('fs');


process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
  inputString += inputStdin;
});

process.stdin.on('end', function() {
  inputString = inputString.split('\n');

  main();
});

function readLine() {
  return inputString[currentLine++];
}
function stripProperty(obj, prop) {
const originalObj = {...obj};
const objKeys=Object.keys(obj);
var index = objKeys.indexOf(prop);
const removeProp=objKeys[index];
delete obj[removeProp];
return obj;
}

function main() {




'use strict';

const fs = require('fs');


process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
  inputString += inputStdin;
});

process.stdin.on('end', function() {
  inputString = inputString.split('\n');

  main();
});

function readLine() {
  return inputString[currentLine++];
}

const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

function logger(msg) {
  ws.write(`${msg.text}\n`);
}

function joinedLogger(level, sep) {
 let joinedLog = '';
 let textMsgs=[]
  return function(...messages){
      let logMsgs = [...messages];
      logMsgs.map(function(message){
          if(message["level"] >= level)
            textMsgs.push(message["text"])
      })
      joinedLog=textMsgs.join(sep);
      console.log(joinedLog.replace('\u0020',''));
      return joinedLog.replace('\u0020','');
  };
}


function main() {
  const firstLine = readLine().trim().split(" ");
  const level = parseInt(firstLine[0]);
  const sep = firstLine[1];
  const myLog = joinedLogger(level, sep);

  const n = parseInt(readLine().trim());
  let messages = [];
  for (let i = 0; i < n; ++i) {
    const line = readLine().trim().split(" ");
    const level = parseInt(line[0]);
    const text = line[1];
    messages.push({ level, text });
  }

  myLog(...messages);
  ws.end();
}


